# Generated by Django 4.1.8 on 2023-04-21 15:25

import apps.membership.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import phonenumber_field.modelfields
import simple_history.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Member",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("first_name", models.CharField(max_length=256)),
                ("last_name", models.CharField(max_length=256)),
                (
                    "gender",
                    models.CharField(
                        choices=[("m", "Male"), ("f", "Female"), ("o", "Other"), ("u", "Unknown")],
                        default="u",
                        max_length=1,
                    ),
                ),
                ("birth_date", models.DateField(blank=True, null=True)),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=50, null=True, region=None),
                ),
                ("phone_verified", models.BooleanField(default=None, null=True)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("email_verified", models.BooleanField(default=None, null=True)),
                ("address1", models.CharField(blank=True, max_length=256, null=True)),
                ("address2", models.CharField(blank=True, max_length=256, null=True)),
                ("country", models.CharField(blank=True, max_length=128, null=True)),
                ("city", models.CharField(blank=True, max_length=128, null=True)),
                ("state", models.CharField(blank=True, max_length=128, null=True)),
                ("zipcode", models.CharField(blank=True, max_length=10, null=True)),
                (
                    "weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(300),
                        ],
                        verbose_name="Weight (kg)",
                    ),
                ),
                (
                    "height",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=3,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(3),
                        ],
                        verbose_name="Height (m)",
                    ),
                ),
                ("social_media", models.JSONField(blank=True, null=True)),
                ("is_verified", models.BooleanField(default=None, null=True)),
                ("usac_license", models.IntegerField(blank=True, null=True, unique=True)),
                ("usac_license_verified", models.BooleanField(default=False)),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="member",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("email", "email_verified"), ("phone", "phone_verified")},
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=256, unique=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("regional", "Regional"),
                            ("club", "Club"),
                            ("advocacy_volunteer", "Advocacy, Volunteer"),
                            ("promoter", "Promoter"),
                        ],
                        max_length=32,
                    ),
                ),
                ("social_media", models.JSONField(blank=True, null=True)),
                ("website", models.URLField(blank=True, null=True)),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=50, null=True, region=None),
                ),
                ("phone_verified", models.BooleanField(default=None, null=True)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("email_verified", models.BooleanField(default=None, null=True)),
                ("address", models.CharField(blank=True, max_length=256, null=True)),
                ("country", models.CharField(blank=True, max_length=128, null=True)),
                ("city", models.CharField(blank=True, max_length=128, null=True)),
                ("state", models.CharField(blank=True, max_length=128, null=True)),
                ("zipcode", models.CharField(blank=True, max_length=10, null=True)),
                ("about", models.TextField(blank=True, null=True)),
                (
                    "logo",
                    models.ImageField(
                        blank=True, null=True, upload_to=apps.membership.models.organization_logo_file_path_func
                    ),
                ),
                ("signup_config", models.JSONField(blank=True, null=True)),
                ("membership_plans", models.JSONField(blank=True, null=True)),
                ("member_fields_schema", models.JSONField(blank=True, null=True)),
                ("verified", models.BooleanField(default=False)),
                ("membership_open", models.BooleanField(blank=True, default=False, null=True)),
                ("approved", models.BooleanField(default=False, null=True)),
                ("rss_url", models.TextField(blank=True, default=None, null=True)),
                ("waiver_text", models.TextField(blank=True, default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="OrganizationMember",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("is_admin", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True, null=True)),
                ("start_date", models.DateField(null=True)),
                ("exp_date", models.DateField(null=True)),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                ("member", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="membership.member")),
                (
                    "organization",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="membership.organization"),
                ),
            ],
            options={
                "unique_together": {("organization", "member")},
            },
        ),
        migrations.AddField(
            model_name="organization",
            name="members",
            field=models.ManyToManyField(
                related_name="organizations", through="membership.OrganizationMember", to="membership.member"
            ),
        ),
        migrations.CreateModel(
            name="HistoricalOrganizationMember",
            fields=[
                ("id", models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("is_admin", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True, null=True)),
                ("start_date", models.DateField(null=True)),
                ("exp_date", models.DateField(null=True)),
                ("datetime", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="membership.member",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="membership.organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical organization member",
                "verbose_name_plural": "historical organization members",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
